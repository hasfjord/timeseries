// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/timeseries.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeSeriesServiceClient is the client API for TimeSeriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeSeriesServiceClient interface {
	PostMeasurement(ctx context.Context, in *PostMeasurementRequest, opts ...grpc.CallOption) (*PostMeasurementResponse, error)
}

type timeSeriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeSeriesServiceClient(cc grpc.ClientConnInterface) TimeSeriesServiceClient {
	return &timeSeriesServiceClient{cc}
}

func (c *timeSeriesServiceClient) PostMeasurement(ctx context.Context, in *PostMeasurementRequest, opts ...grpc.CallOption) (*PostMeasurementResponse, error) {
	out := new(PostMeasurementResponse)
	err := c.cc.Invoke(ctx, "/timeseries.v1.TimeSeriesService/PostMeasurement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeSeriesServiceServer is the server API for TimeSeriesService service.
// All implementations must embed UnimplementedTimeSeriesServiceServer
// for forward compatibility
type TimeSeriesServiceServer interface {
	PostMeasurement(context.Context, *PostMeasurementRequest) (*PostMeasurementResponse, error)
	mustEmbedUnimplementedTimeSeriesServiceServer()
}

// UnimplementedTimeSeriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimeSeriesServiceServer struct {
}

func (UnimplementedTimeSeriesServiceServer) PostMeasurement(context.Context, *PostMeasurementRequest) (*PostMeasurementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMeasurement not implemented")
}
func (UnimplementedTimeSeriesServiceServer) mustEmbedUnimplementedTimeSeriesServiceServer() {}

// UnsafeTimeSeriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeSeriesServiceServer will
// result in compilation errors.
type UnsafeTimeSeriesServiceServer interface {
	mustEmbedUnimplementedTimeSeriesServiceServer()
}

func RegisterTimeSeriesServiceServer(s grpc.ServiceRegistrar, srv TimeSeriesServiceServer) {
	s.RegisterService(&TimeSeriesService_ServiceDesc, srv)
}

func _TimeSeriesService_PostMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMeasurementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesServiceServer).PostMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timeseries.v1.TimeSeriesService/PostMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesServiceServer).PostMeasurement(ctx, req.(*PostMeasurementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeSeriesService_ServiceDesc is the grpc.ServiceDesc for TimeSeriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeSeriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timeseries.v1.TimeSeriesService",
	HandlerType: (*TimeSeriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostMeasurement",
			Handler:    _TimeSeriesService_PostMeasurement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/timeseries.proto",
}
